Problem Statement:
-------------------
Anagram Groups

Given an array of strings strs, group all anagrams together into sublists. You may return the output in any order.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example 1:

Input: strs = ["act","pots","tops","cat","stop","hat"]

Output: [["hat"],["act", "cat"],["stop", "pots", "tops"]]
Example 2:

Input: strs = ["x"]

Output: [["x"]]


Example 3:

Input: strs = [""]

Output: [[""]]
Constraints:

1 <= strs.length <= 1000.
0 <= strs[i].length <= 100
strs[i] is made up of lowercase English letters.


Solution:
----------
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res = defaultdict(list) # mapping of characterCount to list of strings. Strings with same character count are anagrams

        for s in strs:
            count_c = [0] * 26 # for storing a....z

            for c in s: 
                count_c[ord(c) - ord('a')] +=1
            res[tuple(count_c)].append(s)
        
        return res.values()

        # Approach 2
        # Sorted list

        res = defaultdict(list) # mapping is still the same

        for s in strs:
            sortedS = ''.join(sorted(s))
            res[sortedS].append(s)

        return list(res.values())
            


Solution Try 2:
----------------

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:

        anagram_groups = defaultdict(list) # Key = list of character count # Value = list of string with that character count 

       

        # Count the characters in each string
        for s in strs:
            # since strs[i] is made up of lowercase English letters.
            count_char = [0] * 26
            for char in s:
                count_char[ord(char) - ord('a')] += 1
            # print(f"count_char for {s} is {count_char}")
            anagram_groups[tuple(count_char)].append(s)
        return(anagram_groups.values())

        

Learnings:
----------
- The map is creative, it can be countCharacter : list of strings
- it can also be sortedStrings: list of strings
- defaultdict(list)
- list can be keys because it is mutable, need to convert list to tuples to pass as keys

